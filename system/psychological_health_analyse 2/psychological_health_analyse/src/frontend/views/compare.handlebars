
<title>Bootstrap-select 多选下拉框实现</title>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
<link href="https://cdn.bootcss.com/bootstrap-select/1.12.1/css/bootstrap-select.min.css" rel="stylesheet">
<script src="https://cdn.bootcss.com/bootstrap-select/1.12.1/js/bootstrap-select.min.js"></script>



    <div class="form-group">
        <div class="col-lg-6">
            <select id="alg" class="selectpicker show-menu-arrow form-control" multiple>
              {{#each data}}
                <option value="{{name}}">{{name}}</option>
              {{/each}}
            </select>
        </div>
        <button class="col-lg-1 btn btn-primary" onclick="getVal()">确认</button>
    </div>
    <script>



    </script>

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-6">
            <div class="card">
              <div class="card-header">
                  <ul id="line_nav" class="nav nav-tabs card-header-tabs" style="text-align:center">
                    <li class="nav-item">
                      <a class="nav-link active" href="#" onclick="change_line(this,'recall')">recall</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" href="#" onclick="change_line(this,'precision')">accuracy</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" href="#" onclick="change_line(this,'train_time')">训练时间</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link"  href="#" onclick="change_line(this,'bias')">偏差</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link"  href="#" onclick="change_line(this,'variance')">方差</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" href="#" onclick="change_line(this,'serious_err')">严重错误率</a>
                    </li>
                  </ul>
                </div>
                <div class="card-content">
                    <div id="char2" style="height: 370px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative; background: transparent;" ></div>
                </div>
            </div>
      </div>
      <div class="col-lg-6">
          <div class="card">
            <div class="card-header">
                <ul id="bar_nav" class="nav nav-tabs card-header-tabs" style="text-align:center">
                  <li class="nav-item">
                    <a class="nav-link active" href="#" onclick="change_bar(this,'recall')">recall</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" href="#" onclick="change_bar(this,'precision')">accuracy</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" href="#" onclick="change_bar(this,'train_time')">训练时间</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link"  href="#" onclick="change_bar(this,'bias')">偏差</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link"  href="#" onclick="change_bar(this,'variance')">方差</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" href="#" onclick="change_bar(this,'serious_err')">严重错误率</a>
                  </li>
                </ul>
              </div>
              <div class="card-content">
                  <div id="char3" style="height: 370px; -webkit-tap-highlight-color: transparent; user-select: none; position: relative; background: transparent;" ></div>
              </div>
          </div>
      </div>
    </div>

<script src="js/lib/jquery/jquery.min.js"></script>


<!-- Echart -->
<script src="js/lib/echart/echarts.js"></script>
<script src="js/lib/echart/echarts-init.js"></script>



<script type="text/javascript">
  var itemStyle= [
    {normal: {color: "#ff7f50",lineStyle: {color: "#ff7f50"}}},
    {normal: {color: "#87cefa",lineStyle: {color: "#87cefa"}}},
    {normal: {color: "#da70d6",lineStyle: {color: "#da70d6"}}},
    {normal: {color: "#32cd32",lineStyle: {color: "#32cd32"}}},
    {normal: {color: "#6495ed",lineStyle: {color: "#6495ed"}}},
    {normal: {color: "#ff69b4",lineStyle: {color: "#ff69b4"}}},
    {normal: {color: "#ba55d3",lineStyle: {color: "#ba55d3"}}},
    {normal: {color: "#cd5c5c",lineStyle: {color: "#cd5c5c"}}},
    {normal: {color: "#ffa500",lineStyle: {color: "#ffa500"}}},
    {normal: {color: "#40e0d0",lineStyle: {color: "#40e0d0"}}},
    {normal: {color: "#0A6E11",lineStyle: {color: "#0A6E11"}}},
    {normal: {color: "#0D669B",lineStyle: {color: "#0D669B"}}},
    {normal: {color: "#9B0D0D",lineStyle: {color: "#9B0D0D"}}},
    {normal: {color: "#FF0000",lineStyle: {color: "#FF0000"}}},
  ]

      var myChart2 = echarts.init(document.getElementById('char2'));
      option2 = {
        backgroundColor: "#fff",
        color: ["#37A2DA"],
        tooltip: {
          trigger: 'axis'
        },
        tooltip: {
          trigger: 'axis'
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        legend:{data:[]},
        xAxis: {
          type: 'category',
          boundaryGap: false,
          data: []
        },
        yAxis: {
          x: 'center',
          type: 'value',
        },
        series: []
      };
      myChart2.setOption(option2);


      var myChart3 = echarts.init(document.getElementById('char3'));
      option3 = {
        backgroundColor: "#ffffff",
        color: ['#37A2DA'],
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'shadow'
            }
        },
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        legend:{data:[]},
        xAxis: [{
            type: 'category',
            data: [],
            /*
            axisTick: {
                alignWithLabel: true
            }*/
        }],
        yAxis: [{
            type: 'value'
        }],
        series: [{
            name: '',
            type: 'bar',
            barWidth: '70%',
            data: []
        }]
    }
    myChart3.setOption(option3);






      $(window).on('resize',function(){
        myChart2.resize();
        myChart3.resize();
      });


      /*
      server_data:是索要更新的一个算法的全部数据
      length：是server_data数据长度-1
      index：是索引序列号，用来索引全局数据的部分
      name：数据的每一列，取值为['recall','train_time'...]
      algname：算法名称，比如knn
      */
      var update_chart2 = (server_data,length,index,name,algname,flag) => {
        if(!(algname in option2.legend.data))
          option2.legend.data.push(algname)
        //option3.legend.data.push(window.server_name[i])
        //console.log(server_data);
        console.log("in update_chart2");
        if(!option2.series[index]){
          option2.series[index]={}
        }
        option2.series[index].data = []
        //option2.series[index].stack = 'a'
        option2.series[index].type = 'line'
        option2.series[index].name = algname
        option2.series[index].itemStyle = itemStyle[index]
        for(let i = 0;i < length;i++){
          let j = i + 1
          if(option2.xAxis.data.length < j){
            option2.xAxis.data.push("第"+j+"次")
          }
          option2.series[index].data.push(server_data[i][name])
          if(flag)
           myChart2.setOption(option2, true);
        }
      }

      var update_chart3 = (server_data,length,index,name,algname,flag) => {
        if(!(algname in option3.legend.data))
          option3.legend.data.push(algname)
        //option3.legend.data.push(window.server_name[i])
        //console.log(server_data);
        console.log("in update_chart3");
        if(!option3.series[index]){
          option3.series[index]={}
        }
        option3.series[index].data = []
        option3.series[index].stack = 'a'
        option3.series[index].type = 'bar'
        option3.series[index].name = algname
        option3.series[index].itemStyle = itemStyle[index]
        for(let i = 0;i < length;i++){
          let j = i + 1
          if(option3.xAxis[0].data.length < length){
            option3.xAxis[0].data.push("第"+j+"次")
          }
          option3.series[index].data.push(server_data[i][name])
          if(flag)
           myChart3.setOption(option3, true);
        }
      }

      /*
      filename: 服务器文件名，knn.json等
      index: 数字索引
      */
      var get_all_data = (filename,index) => {
          $.ajax({
                url:"/get_run_output_api",
                type:"POST",
                data:{filename:filename},
                success:(data) =>{
                    if(!window.server_data)
                      window.server_data = []
                      if(!window.server_name)
                        window.server_name = []
                    window.server_data[index] = data
                    window.server_name[index] = filename.replace(".json","")
                    last_index = data.length-1

                    update_chart2(data,last_index,index,"recall",window.server_name[index],true)
                    update_chart3(data,last_index,index,"recall",window.server_name[index],true)
                },
                error:(xhr,status,error)=>{
                  console.log("what error??");
                  console.log(error)
                }
              })
      }

      function update_all_charts(){
            window.server_name = []
            window.server_data = []
            option2.xAxis.data=[]
            option3.xAxis[0].data=[]
            option2.series = []
            option3.series = []
            option2.legend.data = []
            option3.legend.data = []

            for(i in window.select){

              //console.log(window.select[i],i)
              get_all_data(window.select[i],i)
            }
            //myChart2.setOption(option2, true);
            //myChart3.setOption(option3, true);

      }


        //get_all_data("knn.json")

        //setInterval(get_all_data,50000)

        function change_line(obj,name){
          $('#line_nav').find('a').attr('class','nav-link')
          for(i in window.server_data){
            //console.log(name);

            update_chart2(window.server_data[i],window.server_data[i].length-1,i,name,window.server_name[i],true)
            //update_chart2(window.server_data[index],window.server_data[index].length-1,name)
          }
          $(obj).attr('class','nav-link active')
        }

        function change_bar(obj,name){
          $('#bar_nav').find('a').attr('class','nav-link')
          for(i in window.server_data){
            //console.log(name);

            update_chart3(window.server_data[i],window.server_data[i].length-1,i,name,window.server_name[i],true)
            //update_chart2(window.server_data[index],window.server_data[index].length-1,name)
          }
          $(obj).attr('class','nav-link active')
        }

        function getVal() {
            window.select = $('#alg').val()
            for(let i in window.select){
              switch (window.select[i]) {
                case "k-近邻算法":
                  window.select[i] = "knn.json"
                  break;
                case "支持向量机":
                  window.select[i] = "svm.json"
                  break;
                case "C4.5算法":
                  window.select[i] = "c4_5.json"
                  break;
                case "CART算法":
                  window.select[i] = "cart.json"
                  break;
                case "AdaBoost":
                  window.select[i] = "adaboost.json"
                  break;
                case "xgBoost":
                  window.select[i] = "xgboost.json"
                  break;
                case "GBDT":
                  window.select[i] = "gbdt.json"
                  break;
                case "随机森林":
                  window.select[i] = "random_forest.json"
                  break;
                case "人工神经网络":
                  window.select[i] = "net.json"
                  break;
                case "logistic回归":
                  window.select[i] = "logistic.json"
                  break;
                case "k-均值":
                  window.select[i] = "k_mean.json"
                  break;
                case "线性回归":
                  window.select[i] = "line.json"
                  break;
                default:
                  console.log("????");
              }
            }
            console.log(window.select);
            console.log('11111111111111111');
            update_all_charts()
        }

</script>
